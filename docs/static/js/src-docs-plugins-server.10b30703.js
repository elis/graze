(window.webpackJsonp=window.webpackJsonp||[]).push([[12,11],{"./src/docs/plugins/index.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"MyMenus",function(){return c}),t.d(n,"default",function(){return b});var r=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=t("./node_modules/react/index.js"),o=t.n(a),i=t("./node_modules/@mdx-js/react/dist/index.es.js"),s=t("./node_modules/docz/dist/index.esm.js"),c=function(e){var n=Object(s.h)(),t=n&&n.length&&n.find(function(e){return"Plugins"===e.name}),r=Object(s.g)();return console.log("what are menus?",{menus:n,plugins:t,docs:r}),Object(i.b)(o.a.Fragment,null,Object(i.b)("h3",null,"Learn more about graze plugins:"),Object(i.b)("div",null,Object(i.b)("ul",null,t&&t.menu&&t.menu.length&&t.menu.map(function(e){return Object(i.b)("li",{key:"items ".concat(e.name)},Object(i.b)(s.b,{to:e.route},e.name))}))))};"undefined"!==typeof c&&c&&c===Object(c)&&Object.isExtensible(c)&&Object.defineProperty(c,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MyMenus",filename:"src/docs/plugins/index.mdx"}});var p={MyMenus:c},l="wrapper";function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)(l,Object.assign({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"graze-plugins"},"Graze Plugins"),Object(i.b)("p",null,"Graze provides a simple but powerful plugins system."),Object(i.b)("p",null,"Unlike components that you might create on a per site or app the plugins system is designed to access the low-level APIs to easily modify the functionality of Graze at the different life-cycle stages of your project."),Object(i.b)("h2",{id:"configuration-file"},"Configuration File"),Object(i.b)("p",null,"The configuration file for Graze allows different functionality to be added to a project."),Object(i.b)("p",null,"The configuration file should be named ",Object(i.b)("inlineCode",{parentName:"p"},"graze.config.js")," and placed at the root of your project and contain the relevant named exports."),Object(i.b)("p",null,"Currently the only supported export is ",Object(i.b)("inlineCode",{parentName:"p"},"plugins"),"."),Object(i.b)("p",null,"Example ",Object(i.b)("inlineCode",{parentName:"p"},"graze.config.js"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"export const plugins = [\n  require('./src/plugins/graze-styled-components'),\n  require('./src/plugins/graze-material-ui'),\n  require('./src/plugins/graze-tutorial'),\n  require('./src/plugins/graze-graphcms'),\n  {\n    module: require('./src/plugins/graze-ga'),\n    trackingId: 'UA-138092593-2',\n    gaOptions: { name: 'graze-setup' }\n  }\n]\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"plugins")," export should be an array containing objects or require\nstatements like in the above example."),Object(i.b)("p",null,"When passing a ",Object(i.b)("inlineCode",{parentName:"p"},"require('...')")," statement the loaded module will be\nused."),Object(i.b)("p",null,"When passing an object, it must contain a ",Object(i.b)("inlineCode",{parentName:"p"},"module")," property with the\nplugin module as value. The rest of the properties are passed in as the plugins ",Object(i.b)("inlineCode",{parentName:"p"},"options"),", as canbe be see in the ",Object(i.b)("inlineCode",{parentName:"p"},"react-ga")," example."),Object(i.b)("h2",{id:"plugin-structure"},"Plugin Structure"),Object(i.b)("p",null,"A Graze plugin is composed of three directives: ",Object(i.b)("strong",{parentName:"p"},"server"),", ",Object(i.b)("strong",{parentName:"p"},"client"),", and ",Object(i.b)("strong",{parentName:"p"},"app"),", each of which is executed according to the plugins needs."),Object(i.b)("p",null,"A plugin module is expected to export one or more directives to function properly."),Object(i.b)("p",null,"Each of the directives contains an ",Object(i.b)("strong",{parentName:"p"},"activation function")," that will signal to graze that the plugin needs to do something, and depending on the directive it will contain ",Object(i.b)("strong",{parentName:"p"},"Wrapper")," components, ",Object(i.b)("strong",{parentName:"p"},"wrapper")," functions, and ",Object(i.b)("strong",{parentName:"p"},"output")," functions."),Object(i.b)(c,{mdxType:"MyMenus"}))}b&&b===Object(b)&&Object.isExtensible(b)&&Object.defineProperty(b,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/docs/plugins/index.mdx"}}),b.isMDXComponent=!0},"./src/docs/plugins/server.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"test",function(){return i}),t.d(n,"default",function(){return p});var r=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),o=t("./src/docs/plugins/index.mdx"),i=console.log("what are MyMenus?",o.MyMenus);"undefined"!==typeof i&&i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"test",filename:"src/docs/plugins/server.mdx"}});var s={test:i},c="wrapper";function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)(c,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"server-plugins"},"Server Plugins"),Object(a.b)("p",null,"The server plugin is executed on each request to the server."),Object(a.b)("p",null,"The ",Object(a.b)("strong",{parentName:"p"},"onRequest")," property is required to activate any of the server plugin functions."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"export const server = {\n  onRequest: (req, res, options) => {\n    const someOtherResource = require('my-resource')\n    return { someOtherResource }\n  },\n  wrapper: (wrapped, { fields: { someOtherResource } }) => {\n    const wrapper = someOtherResource.withResource\n    return wrapper(wrapped)\n  },\n  Wrapper: ({ fields: { someOtherResource }, children }) => {\n    const MyAwesomeProvider = require('./store')\n    return (\n      <MyAwesomeProvider store={someOtherResource.store}>\n        {children}\n      </ApolloProvider>\n    )\n  },\n  output: ({ fields: { someOtherResource } }) => {\n    const extracted = someOtherResource.extract()\n    return `<meta name='my-awesome-meta' content='${extracted.comment}' />`\n  }\n}\n")),Object(a.b)("h2",{id:"onrequest"},Object(a.b)("inlineCode",{parentName:"h2"},"onRequest")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Parameters",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"req"),": expressjs ",Object(a.b)("inlineCode",{parentName:"li"},"Request")," object"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"res"),": expressjs ",Object(a.b)("inlineCode",{parentName:"li"},"Response")," object"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"options"),": ",Object(a.b)("inlineCode",{parentName:"li"},"object")," \u2014 additional options passed to the plugin"))),Object(a.b)("li",{parentName:"ul"},"Return ",Object(a.b)("inlineCode",{parentName:"li"},"object")," \u2014 pass in any values needed in wrapper/output functions")),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"onRequest")," to do any perliminary work like loading external resources or connecting to APIs. Anything return by the ",Object(a.b)("inlineCode",{parentName:"p"},"onRequest")," function will be passed in as part of the ",Object(a.b)("inlineCode",{parentName:"p"},"Plugin.fields")," property later on to ",Object(a.b)("inlineCode",{parentName:"p"},"Wrapper"),", ",Object(a.b)("inlineCode",{parentName:"p"},"wrapper"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"output"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"export const server = {\n  onRequest: (req, res, options) => {\n    const someOtherResource = require('my-resource')\n    return { someOtherResource }\n  }\n}\n")),Object(a.b)("h2",{id:"wrapper"},Object(a.b)("inlineCode",{parentName:"h2"},"Wrapper")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Props",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"children")," \u2014 React children ",Object(a.b)("inlineCode",{parentName:"li"},"object")," that should be wrapped by the wrapper"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"fields")," \u2014 ",Object(a.b)("inlineCode",{parentName:"li"},"Object")," passed by ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"#onrequest"}),Object(a.b)("strong",{parentName:"a"},"onRerequest"))," function"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"options")," \u2014 ",Object(a.b)("inlineCode",{parentName:"li"},"Object")," contains any additional properties passed to the plugins' configuration in ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"#config"}),Object(a.b)("strong",{parentName:"a"},"graze.config.js")))))),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"Wrapper")," to wrap the app with any providers you might want."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"export const server = {\n  Wrapper: ({ fields: { someOtherResource }, children }) => {\n    const MyAwesomeProvider = require('./store')\n    return (\n      <MyAwesomeProvider store={someOtherResource.store}>\n        {children}\n      </ApolloProvider>\n    )\n  }\n}\n")),Object(a.b)("h2",{id:"wrapper-1"},Object(a.b)("inlineCode",{parentName:"h2"},"wrapper")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Parameters",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"wrapped")," \u2014 the wrapped component"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"plugin")," \u2014 ",Object(a.b)("inlineCode",{parentName:"li"},"Object")," containing the plugin options, directives")))),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"wrapper")," is used to wrap components functionally ala ",Object(a.b)("inlineCode",{parentName:"p"},"withRouter(component)"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"export const server = {\n  wrapper: (wrapped, { fields: { someOtherResource } }) => {\n    const wrapper = someOtherResource.withResource\n    return wrapper(wrapped)\n  }\n}\n")),Object(a.b)("h2",{id:"output"},Object(a.b)("inlineCode",{parentName:"h2"},"output")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Parameters",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"plugin")," \u2014 ",Object(a.b)("inlineCode",{parentName:"li"},"Object")," containing the plugin options, directives")))),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"output")," hook allows to tap into the server generated HTML output for plugins that need to generate server-side content."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"export const server = {\n  output: ({ fields: { someOtherResource }, options: { myValue } }) => {\n    const extracted = someOtherResource.extract()\n    return `\n    <meta name='my-awesome-meta' content='${extracted.comment}' />\n    <meta name='my-awesome-value' content='${myValue}' />\n    `\n  }\n}\n")),Object(a.b)(o.MyMenus,{current:"/plugins/server",mdxType:"MyMenus"}))}p&&p===Object(p)&&Object.isExtensible(p)&&Object.defineProperty(p,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/docs/plugins/server.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=src-docs-plugins-server.b494e06a5a73b8e632fe.js.map