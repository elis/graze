(window.webpackJsonp=window.webpackJsonp||[]).push([[10,11],{"./src/docs/plugins/exposed.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return p});var i=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),o=t("./src/docs/plugins/index.mdx"),r={},s="wrapper";function p(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)(s,Object.assign({},r,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"accessing-exposed-plugins"},"Accessing Exposed Plugins"),Object(a.b)("p",null,"When plugins ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/plugins/app#expose"}),"expose")," part of their functionality you as a developer can access those exposed properties by simply importing/requiring the ",Object(a.b)("inlineCode",{parentName:"p"},"@graze")," psuedo-module."),Object(a.b)("p",null,"By adding ",Object(a.b)("inlineCode",{parentName:"p"},"NODE_PATH=src")," to our ",Object(a.b)("inlineCode",{parentName:"p"},".env.local")," file automatically when setting up the Graze project we allow Node and webpack to quickly lookup modules from import and require statements and attempt to load them from the defined path, allowing us to easily import components, pages, and plugins."),Object(a.b)("p",null,"When ",Object(a.b)("inlineCode",{parentName:"p"},"import"),"ing/",Object(a.b)("inlineCode",{parentName:"p"},"require"),"ing ",Object(a.b)("inlineCode",{parentName:"p"},"@graze")," the default export will contain any properties exposed by ay of the plugins as configured in ",Object(a.b)("inlineCode",{parentName:"p"},"graze.config.js")," (see ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"plugins#configuration-file"}),"Configuration File"),")."),Object(a.b)("p",null,"Example usage:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"export default (props) => {\n  const { useSite } = require('@graze').default\n  const { state: site } = (useSite && useSite()) || {}\n\n  const Comp = useMemo(() => {\n    const comp = site && site.attributes && site.attributes.pageComponent\n    return comp\n      ? require('../' + comp.split(':')[0])[comp.split(':')[1] || 'default']\n      : require('./base-page').default\n  }, [site && site.attributes && site.attributes.pageComponent])\n\n  return <Comp>{props.children}</Comp>\n}\n")),Object(a.b)("p",null,"The component will attempt to invoke ",Object(a.b)("inlineCode",{parentName:"p"},"useSite()")," after the require statement, and provide different functionality if such an export is found. The ",Object(a.b)("inlineCode",{parentName:"p"},"useSite()")," function is a context hook create by the ",Object(a.b)("inlineCode",{parentName:"p"},"graze-graphcms")," plugin."),Object(a.b)(o.MyMenus,{current:"/plugins/server",mdxType:"MyMenus"}))}p&&p===Object(p)&&Object.isExtensible(p)&&Object.defineProperty(p,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/docs/plugins/exposed.mdx"}}),p.isMDXComponent=!0},"./src/docs/plugins/index.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"MyMenus",function(){return p}),t.d(n,"default",function(){return u});var i=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/react/dist/index.es.js"),s=t("./node_modules/docz/dist/index.esm.js"),p=function(e){var n=Object(s.h)(),t=n&&n.length&&n.find(function(e){return"Plugins"===e.name}),i=Object(s.g)();return console.log("what are menus?",{menus:n,plugins:t,docs:i}),Object(r.b)(o.a.Fragment,null,Object(r.b)("h3",null,"Learn more about graze plugins:"),Object(r.b)("div",null,Object(r.b)("ul",null,t&&t.menu&&t.menu.length&&t.menu.map(function(e){return Object(r.b)("li",{key:"items ".concat(e.name)},Object(r.b)(s.b,{to:e.route},e.name))}))))};"undefined"!==typeof p&&p&&p===Object(p)&&Object.isExtensible(p)&&Object.defineProperty(p,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MyMenus",filename:"src/docs/plugins/index.mdx"}});var l={MyMenus:p},c="wrapper";function u(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)(c,Object.assign({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"graze-plugins"},"Graze Plugins"),Object(r.b)("p",null,"Graze provides a simple but powerful plugins system."),Object(r.b)("p",null,"Unlike components that you might create on a per site or app the plugins system is designed to access the low-level APIs to easily modify the functionality of Graze at the different life-cycle stages of your project."),Object(r.b)("h2",{id:"configuration-file"},"Configuration File"),Object(r.b)("p",null,"The configuration file for Graze allows different functionality to be added to a project."),Object(r.b)("p",null,"The configuration file should be named ",Object(r.b)("inlineCode",{parentName:"p"},"graze.config.js")," and placed at the root of your project and contain the relevant named exports."),Object(r.b)("p",null,"Currently the only supported export is ",Object(r.b)("inlineCode",{parentName:"p"},"plugins"),"."),Object(r.b)("p",null,"Example ",Object(r.b)("inlineCode",{parentName:"p"},"graze.config.js"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"export const plugins = [\n  require('./src/plugins/graze-styled-components'),\n  require('./src/plugins/graze-material-ui'),\n  require('./src/plugins/graze-tutorial'),\n  require('./src/plugins/graze-graphcms'),\n  {\n    module: require('./src/plugins/graze-ga'),\n    trackingId: 'UA-138092593-2',\n    gaOptions: { name: 'graze-setup' }\n  }\n]\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"plugins")," export should be an array containing objects or require\nstatements like in the above example."),Object(r.b)("p",null,"When passing a ",Object(r.b)("inlineCode",{parentName:"p"},"require('...')")," statement the loaded module will be\nused."),Object(r.b)("p",null,"When passing an object, it must contain a ",Object(r.b)("inlineCode",{parentName:"p"},"module")," property with the\nplugin module as value. The rest of the properties are passed in as the plugins ",Object(r.b)("inlineCode",{parentName:"p"},"options"),", as canbe be see in the ",Object(r.b)("inlineCode",{parentName:"p"},"react-ga")," example."),Object(r.b)("h2",{id:"plugin-structure"},"Plugin Structure"),Object(r.b)("p",null,"A Graze plugin is composed of three directives: ",Object(r.b)("strong",{parentName:"p"},"server"),", ",Object(r.b)("strong",{parentName:"p"},"client"),", and ",Object(r.b)("strong",{parentName:"p"},"app"),", each of which is executed according to the plugins needs."),Object(r.b)("p",null,"A plugin module is expected to export one or more directives to function properly."),Object(r.b)("p",null,"Each of the directives contains an ",Object(r.b)("strong",{parentName:"p"},"activation function")," that will signal to graze that the plugin needs to do something, and depending on the directive it will contain ",Object(r.b)("strong",{parentName:"p"},"Wrapper")," components, ",Object(r.b)("strong",{parentName:"p"},"wrapper")," functions, and ",Object(r.b)("strong",{parentName:"p"},"output")," functions."),Object(r.b)(p,{mdxType:"MyMenus"}))}u&&u===Object(u)&&Object.isExtensible(u)&&Object.defineProperty(u,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/docs/plugins/index.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=src-docs-plugins-exposed.b494e06a5a73b8e632fe.js.map