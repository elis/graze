{"version":3,"sources":["/Users/eli/projects/graze/packages/graze-site/src/docs/plugins/exposed.mdx","/Users/eli/projects/graze/packages/graze-site/src/docs/plugins/index.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_eli_projects_graze_packages_graze_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","_index_mdx__WEBPACK_IMPORTED_MODULE_3__","current","isMDXComponent","MyMenus","menus","useMenus","plugins","length","find","name","docs","useDocs","console","log","react__WEBPACK_IMPORTED_MODULE_1___default","a","Fragment","menu","map","item","key","concat","docz__WEBPACK_IMPORTED_MODULE_3__","to","route","_ref2"],"mappings":"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","file":"static/js/src-docs-plugins-exposed.caa1b163.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { MyMenus } from './index.mdx'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"accessing-exposed-plugins\"\n    }}>{`Accessing Exposed Plugins`}</h1>\n    <p>{`When plugins `}<a parentName=\"p\" {...{\n        \"href\": \"/plugins/app#expose\"\n      }}>{`expose`}</a>{` part of their functionality you as a developer can access those exposed properties by simply importing/requiring the `}<inlineCode parentName=\"p\">{`@graze`}</inlineCode>{` psuedo-module.`}</p>\n    <p>{`By adding `}<inlineCode parentName=\"p\">{`NODE_PATH=src`}</inlineCode>{` to our `}<inlineCode parentName=\"p\">{`.env.local`}</inlineCode>{` file automatically when setting up the Graze project we allow Node and webpack to quickly lookup modules from import and require statements and attempt to load them from the defined path, allowing us to easily import components, pages, and plugins.`}</p>\n    <p>{`When `}<inlineCode parentName=\"p\">{`import`}</inlineCode>{`ing/`}<inlineCode parentName=\"p\">{`require`}</inlineCode>{`ing `}<inlineCode parentName=\"p\">{`@graze`}</inlineCode>{` the default export will contain any properties exposed by ay of the plugins as configured in `}<inlineCode parentName=\"p\">{`graze.config.js`}</inlineCode>{` (see `}<a parentName=\"p\" {...{\n        \"href\": \"plugins#configuration-file\"\n      }}>{`Configuration File`}</a>{`).`}</p>\n    <p>{`Example usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default (props) => {\n  const { useSite } = require('@graze').default\n  const { state: site } = (useSite && useSite()) || {}\n\n  const Comp = useMemo(() => {\n    const comp = site && site.attributes && site.attributes.pageComponent\n    return comp\n      ? require('../' + comp.split(':')[0])[comp.split(':')[1] || 'default']\n      : require('./base-page').default\n  }, [site && site.attributes && site.attributes.pageComponent])\n\n  return <Comp>{props.children}</Comp>\n}\n`}</code></pre>\n    <p>{`The component will attempt to invoke `}<inlineCode parentName=\"p\">{`useSite()`}</inlineCode>{` after the require statement, and provide different functionality if such an export is found. The `}<inlineCode parentName=\"p\">{`useSite()`}</inlineCode>{` function is a context hook create by the `}<inlineCode parentName=\"p\">{`graze-graphcms`}</inlineCode>{` plugin.`}</p>\n\n    <MyMenus current='/plugins/server' mdxType=\"MyMenus\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { useMenus, useDocs, Link } from 'docz'\nexport const MyMenus = props => {\n  const menus = useMenus()\n  const plugins = menus && menus.length && menus.find(({name}) => name === 'Plugins')\n  const docs = useDocs()\n  console.log('what are menus?', {menus, plugins, docs})\n  return (\n    <>\n      <h3>Learn more about graze plugins:</h3>\n      <div>\n        <ul>\n          {plugins && plugins.menu && plugins.menu.length && (\n            plugins.menu\n              .map(item => (\n                <li key={`items ${item.name}`}><Link to={item.route}>{item.name}</Link></li>\n              ))\n          )}\n        </ul>\n      </div>\n    </>\n  )\n}\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  MyMenus\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"graze-plugins\"\n    }}>{`Graze Plugins`}</h1>\n    <p>{`Graze provides a simple but powerful plugins system.`}</p>\n    <p>{`Unlike components that you might create on a per site or app the plugins system is designed to access the low-level APIs to easily modify the functionality of Graze at the different life-cycle stages of your project.`}</p>\n    <h2 {...{\n      \"id\": \"configuration-file\"\n    }}>{`Configuration File`}</h2>\n    <p>{`The configuration file for Graze allows different functionality to be added to a project.`}</p>\n    <p>{`The configuration file should be named `}<inlineCode parentName=\"p\">{`graze.config.js`}</inlineCode>{` and placed at the root of your project and contain the relevant named exports.`}</p>\n    <p>{`Currently the only supported export is `}<inlineCode parentName=\"p\">{`plugins`}</inlineCode>{`.`}</p>\n    <p>{`Example `}<inlineCode parentName=\"p\">{`graze.config.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export const plugins = [\n  require('./src/plugins/graze-styled-components'),\n  require('./src/plugins/graze-material-ui'),\n  require('./src/plugins/graze-tutorial'),\n  require('./src/plugins/graze-graphcms'),\n  {\n    module: require('./src/plugins/graze-ga'),\n    trackingId: 'UA-138092593-2',\n    gaOptions: { name: 'graze-setup' }\n  }\n]\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`plugins`}</inlineCode>{` export should be an array containing objects or require\nstatements like in the above example.`}</p>\n    <p>{`When passing a `}<inlineCode parentName=\"p\">{`require('...')`}</inlineCode>{` statement the loaded module will be\nused.`}</p>\n    <p>{`When passing an object, it must contain a `}<inlineCode parentName=\"p\">{`module`}</inlineCode>{` property with the\nplugin module as value. The rest of the properties are passed in as the plugins `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{`, as canbe be see in the `}<inlineCode parentName=\"p\">{`react-ga`}</inlineCode>{` example.`}</p>\n    <h2 {...{\n      \"id\": \"plugin-structure\"\n    }}>{`Plugin Structure`}</h2>\n    <p>{`A Graze plugin is composed of three directives: `}<strong parentName=\"p\">{`server`}</strong>{`, `}<strong parentName=\"p\">{`client`}</strong>{`, and `}<strong parentName=\"p\">{`app`}</strong>{`, each of which is executed according to the plugins needs.`}</p>\n    <p>{`A plugin module is expected to export one or more directives to function properly.`}</p>\n    <p>{`Each of the directives contains an `}<strong parentName=\"p\">{`activation function`}</strong>{` that will signal to graze that the plugin needs to do something, and depending on the directive it will contain `}<strong parentName=\"p\">{`Wrapper`}</strong>{` components, `}<strong parentName=\"p\">{`wrapper`}</strong>{` functions, and `}<strong parentName=\"p\">{`output`}</strong>{` functions.`}</p>\n\n\n    <MyMenus mdxType=\"MyMenus\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}